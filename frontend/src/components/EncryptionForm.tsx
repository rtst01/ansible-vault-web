import React, { useState, useRef, useEffect, useCallback } from 'react';

interface Template {
  id: string;
  name: string;
  description: string;
  content: string;
  category: string;
  icon: string;
}

interface EncryptionResult {
  encryptedText?: string;
  decryptedText?: string;
  success: boolean;
  error?: string;
}

const EncryptionForm: React.FC = () => {
  const [mode, setMode] = useState<'encrypt' | 'decrypt'>('encrypt');
  const [text, setText] = useState('');
  const [password, setPassword] = useState('');
  const [result, setResult] = useState<EncryptionResult | null>(null);
  const [loading, setLoading] = useState(false);
  const [showTemplates, setShowTemplates] = useState(true);

  const inputTextareaRef = useRef<HTMLTextAreaElement>(null);
  const resultTextareaRef = useRef<HTMLTextAreaElement>(null);
  const resizeTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  // –®–∞–±–ª–æ–Ω—ã —Ñ–∞–π–ª–æ–≤
  const templates: Template[] = [
    {
      id: 'k8s-secret',
      name: 'K8s Secret',
      description: 'Kubernetes Secret —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è',
      category: 'Kubernetes',
      icon: '‚ò∏Ô∏è',
      content: `apiVersion: v1
kind: Secret
metadata:
  name: app-secret
  namespace: default
type: Opaque
stringData:
  DATABASE_URL: "postgresql://user:password@localhost:5432/dbname"
  API_KEY: "your-api-key-here"
  JWT_SECRET: "your-jwt-secret-key"`
    },
    {
      id: 'k8s-configmap',
      name: 'K8s ConfigMap',
      description: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
      category: 'Kubernetes',
      icon: '‚öôÔ∏è',
      content: `apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: default
data:
  LOG_LEVEL: "INFO"
  ENVIRONMENT: "production"
  MAX_CONNECTIONS: "100"`
    },
    {
      id: 'docker-compose',
      name: 'Docker Compose',
      description: 'Docker Compose —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏',
      category: 'Docker',
      icon: 'üê≥',
      content: `version: '3.8'
services:
  app:
    image: myapp:latest
    environment:
      - DATABASE_URL=postgresql://user:password@db:5432/dbname
      - API_KEY=your-api-key`
    },
    {
      id: 'env-file',
      name: '.env —Ñ–∞–π–ª',
      description: '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è',
      category: 'Environment',
      icon: 'üîß',
      content: `# Database Configuration
DATABASE_URL=postgresql://user:password@localhost:5432/dbname
API_KEY=your-api-key-here
JWT_SECRET=your-super-secret-jwt-key`
    },
    {
      id: 'nginx-config',
      name: 'Nginx',
      description: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Nginx —Å SSL',
      category: 'Web Server',
      icon: 'üåê',
      content: `server {
    listen 443 ssl http2;
    server_name example.com;
    
    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;
    
    location / {
        proxy_pass http://localhost:3000;
    }
}`
    }
  ];

  // Debounced —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã—Å–æ—Ç—ã textarea
  const adjustTextareaHeight = useCallback((textarea: HTMLTextAreaElement) => {
    if (resizeTimeoutRef.current) {
      clearTimeout(resizeTimeoutRef.current);
    }

    resizeTimeoutRef.current = setTimeout(() => {
      textarea.style.height = 'auto';
      textarea.style.height = `${textarea.scrollHeight}px`;
    }, 50); // 50ms debounce
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å debounced –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –≤—ã—Å–æ—Ç—ã
  const handleTextChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setText(e.target.value);
    adjustTextareaHeight(e.target);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞
  const handleTemplateSelect = (template: Template) => {
    setText(template.content);
    setMode('encrypt'); // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω—è–µ–º –≤—ã—Å–æ—Ç—É textarea
    setTimeout(() => {
      if (inputTextareaRef.current) {
        adjustTextareaHeight(inputTextareaRef.current);
      }
    }, 100);
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    if (resultTextareaRef.current && result) {
      const textarea = resultTextareaRef.current;
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –≤—ã—Å–æ—Ç—ã
      setTimeout(() => adjustTextareaHeight(textarea), 10);
    }
  }, [result, adjustTextareaHeight]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  useEffect(() => {
    if (resultTextareaRef.current && result?.success) {
      const textarea = resultTextareaRef.current;
      const content = mode === 'encrypt' ? result.encryptedText : result.decryptedText;
      if (content) {
        setTimeout(() => adjustTextareaHeight(textarea), 10);
      }
    }
  }, [result?.encryptedText, result?.decryptedText, mode, adjustTextareaHeight, result?.success]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    if (inputTextareaRef.current) {
      adjustTextareaHeight(inputTextareaRef.current);
    }
  }, [adjustTextareaHeight]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞
  useEffect(() => {
    if (inputTextareaRef.current) {
      adjustTextareaHeight(inputTextareaRef.current);
    }
  }, [mode, adjustTextareaHeight]);

  // –û—á–∏—Å—Ç–∫–∞ timeout –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (resizeTimeoutRef.current) {
        clearTimeout(resizeTimeoutRef.current);
      }
    };
  }, []);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setResult(null);

    try {
      const endpoint = mode === 'encrypt'
        ? '/api/v1/encrypt/text'
        : '/api/v1/decrypt/text';

      const payload = mode === 'encrypt'
        ? { text, password, algorithm: 'ansible-vault' }
        : { encrypted_text: text, password };

      const response = await fetch(`http://localhost:8000${endpoint}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });

      const data = await response.json();

      if (response.ok) {
        setResult({
          success: true,
          encryptedText: mode === 'encrypt' ? data.encrypted_text : undefined,
          decryptedText: mode === 'decrypt' ? data.decrypted_text : undefined,
        });
      } else {
        setResult({
          success: false,
          error: data.detail || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞',
        });
      }
    } catch (error) {
      setResult({
        success: false,
        error: '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º',
      });
    } finally {
      setLoading(false);
    }
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
  };

  return (
    <div className="encryption-container">
      {/* –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É */}
      <div className="main-form-centered">
        <div className="modern-card">
          <div className="section-header">
            <h2 className="section-title">
              {mode === 'encrypt' ? 'üîí –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞' : 'üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞'}
            </h2>
            <p className="section-description">
              {mode === 'encrypt'
                ? '–ó–∞—à–∏—Ñ—Ä—É–π—Ç–µ –≤–∞—à —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ Ansible Vault'
                : '–†–∞—Å—à–∏—Ñ—Ä—É–π—Ç–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é –ø–∞—Ä–æ–ª—è'
              }
            </p>
          </div>

          {/* Mode Toggle */}
          <div className="mode-toggle">
            <div className="modern-tab-container">
              <button
                onClick={() => setMode('encrypt')}
                className={`modern-tab-button ${mode === 'encrypt' ? 'active' : ''}`}
              >
                üîí –®–∏—Ñ—Ä–æ–≤–∞—Ç—å
              </button>
              <button
                onClick={() => setMode('decrypt')}
                className={`modern-tab-button ${mode === 'decrypt' ? 'active' : ''}`}
              >
                üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å
              </button>
            </div>
          </div>

          <form onSubmit={handleSubmit} className="space-y-8">
            <div className="modern-form-group">
              <label className="modern-form-label">
                {mode === 'encrypt' ? '–¢–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è' : '–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç'}
              </label>
              <textarea
                ref={inputTextareaRef}
                value={text}
                onChange={handleTextChange}
                onFocus={(e) => adjustTextareaHeight(e.target)}
                className="modern-form-input modern-form-textarea auto-resize"
                placeholder={mode === 'encrypt'
                  ? '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å...'
                  : '–í–≤–µ–¥–∏—Ç–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç...'
                }
                required
              />
            </div>

            <div className="modern-form-group">
              <label className="modern-form-label">
                –ü–∞—Ä–æ–ª—å
              </label>
              <input
                type="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="modern-form-input"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤)"
                required
                minLength={8}
              />
              <p className="text-sm text-gray-500 mt-3">
                –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è –∑–∞–≥–ª–∞–≤–Ω—ã–µ –∏ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã
              </p>
            </div>

            <button
              type="submit"
              disabled={loading}
              className="modern-btn modern-btn-primary w-full"
              style={{ width: '100%' }}
            >
              {loading ? '‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞...' : (mode === 'encrypt' ? 'üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å' : 'üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å')}
            </button>
          </form>

          {/* Results */}
          {result && (
            <div className={`results-section ${result.success ? 'results-success' : 'results-error'} mt-8`}>
              {result.success ? (
                <div className="space-y-6">
                  <div className="flex items-center space-x-3 text-success">
                    <span style={{ fontSize: '2rem' }}>‚úÖ</span>
                    <span className="font-semibold text-lg">
                      {mode === 'encrypt' ? '–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω!' : '–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω!'}
                    </span>
                  </div>

                  <div>
                    <label className="modern-form-label">
                      {mode === 'encrypt' ? '–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç' : '–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç'}
                    </label>
                    <div style={{ position: 'relative' }}>
                      <textarea
                        ref={resultTextareaRef}
                        value={mode === 'encrypt' ? result.encryptedText : result.decryptedText}
                        readOnly
                        onFocus={(e) => adjustTextareaHeight(e.target)}
                        className="modern-form-input modern-form-textarea auto-resize"
                        style={{ backgroundColor: '#f8fafc' }}
                      />
                      <button
                        onClick={() => copyToClipboard(mode === 'encrypt' ? result.encryptedText! : result.decryptedText!)}
                        className="copy-button"
                        title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"
                      >
                        üìã
                      </button>
                    </div>
                  </div>
                </div>
              ) : (
                <div className="flex items-center space-x-3 text-error">
                  <span style={{ fontSize: '2rem' }}>‚ùå</span>
                  <span className="font-semibold text-lg">–û—à–∏–±–∫–∞: {result.error}</span>
                </div>
              )}
            </div>
          )}
        </div>
      </div>

      {/* –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã —Å–ø—Ä–∞–≤–∞ */}
      <div className="compact-templates">
        <div className="modern-card">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold text-gray-900 flex items-center">
              <span className="template-status-indicator"></span>
              üìã –®–∞–±–ª–æ–Ω—ã
            </h3>
            <button
              onClick={() => setShowTemplates(!showTemplates)}
              className="text-gray-500 hover:text-gray-700 text-sm font-bold transition-colors duration-200"
            >
              {showTemplates ? '‚àí' : '+'}
            </button>
          </div>

          {showTemplates && (
            <div className="space-y-2">
              {templates.map(template => (
                <div
                  key={template.id}
                  className="template-item"
                  onClick={() => handleTemplateSelect(template)}
                  title={`–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω: ${template.name}`}
                >
                  <div className="flex items-center">
                    <div className="template-icon">{template.icon}</div>
                    <div className="template-content">
                      <h4>{template.name}</h4>
                      <p>{template.description}</p>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}

          {!showTemplates && (
            <p className="text-sm text-gray-500 text-center py-4">
              –ù–∞–∂–º–∏—Ç–µ + —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —à–∞–±–ª–æ–Ω—ã
            </p>
          )}
        </div>
      </div>
    </div>
  );
};

export default EncryptionForm;
