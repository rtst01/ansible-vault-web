import React, { useState, useCallback } from 'react';
import { useDropzone } from 'react-dropzone';

interface FileResult {
  filename: string;
  success: boolean;
  error?: string;
  downloadUrl?: string;
}

const FileUpload: React.FC = () => {
  const [mode, setMode] = useState<'encrypt' | 'decrypt'>('encrypt');
  const [password, setPassword] = useState('');
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [result, setResult] = useState<FileResult | null>(null);
  const [loading, setLoading] = useState(false);

  const onDrop = useCallback((acceptedFiles: File[]) => {
    if (acceptedFiles.length > 0) {
      setSelectedFile(acceptedFiles[0]);
      setResult(null);
    }
  }, []);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      'text/*': ['.txt', '.md', '.py', '.js', '.ts', '.html', '.css', '.json', '.xml', '.yml', '.yaml'],
      'application/*': ['.ini', '.cfg', '.conf', '.log', '.csv', '.sql']
    },
    maxFiles: 1,
    maxSize: 10 * 1024 * 1024, // 10MB
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!selectedFile) return;

    setLoading(true);
    setResult(null);

    try {
      const formData = new FormData();
      formData.append('file', selectedFile);
      formData.append('password', password);

      const endpoint = mode === 'encrypt'
        ? '/api/v1/encrypt/file'
        : '/api/v1/decrypt/file';

      const response = await fetch(`http://localhost:8000${endpoint}`, {
        method: 'POST',
        body: formData,
      });

      if (response.ok) {
        // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        const contentDisposition = response.headers.get('content-disposition');
        let filename = selectedFile.name;
        if (contentDisposition) {
          const filenameMatch = contentDisposition.match(/filename="(.+)"/);
          if (filenameMatch) {
            filename = filenameMatch[1];
          }
        }

        // –°–æ–∑–¥–∞–µ–º blob –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);

        setResult({
          filename,
          success: true,
          downloadUrl: url,
        });
      } else {
        const errorData = await response.json();
        setResult({
          filename: selectedFile.name,
          success: false,
          error: errorData.detail || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞',
        });
      }
    } catch (error) {
      setResult({
        filename: selectedFile.name,
        success: false,
        error: '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º',
      });
    } finally {
      setLoading(false);
    }
  };

  const removeFile = () => {
    setSelectedFile(null);
    setResult(null);
  };

  return (
    <>
      <div className="section-header">
        <h2 className="section-title">
          {mode === 'encrypt' ? 'üîí –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤' : 'üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤'}
        </h2>
        <p className="section-description">
          {mode === 'encrypt'
            ? '–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤'
            : '–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤'
          }
        </p>
      </div>

      {/* Mode Toggle */}
      <div className="mode-toggle">
        <div className="modern-tab-container">
          <button
            onClick={() => setMode('encrypt')}
            className={`modern-tab-button ${mode === 'encrypt' ? 'active' : ''}`}
          >
            üîí –®–∏—Ñ—Ä–æ–≤–∞—Ç—å
          </button>
          <button
            onClick={() => setMode('decrypt')}
            className={`modern-tab-button ${mode === 'decrypt' ? 'active' : ''}`}
          >
            üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å
          </button>
        </div>
      </div>

      <form onSubmit={handleSubmit} className="space-y-8">
        {/* File Upload */}
        <div className="modern-form-group">
          <label className="modern-form-label">
            {mode === 'encrypt' ? '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è' : '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏'}
          </label>

          {!selectedFile ? (
            <div
              {...getRootProps()}
              className={`file-upload-area ${isDragActive ? 'drag-active' : ''}`}
            >
              <input {...getInputProps()} />
              <div className="space-y-4">
                <div style={{ fontSize: '2.5rem' }}>üìÅ</div>
                <div>
                  <p className="text-lg font-medium text-gray-900">
                    {isDragActive ? '–û—Ç–ø—É—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª –∑–¥–µ—Å—å' : '–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞'}
                  </p>
                  <p className="text-sm text-gray-500 mt-1">
                    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: TXT, MD, PY, JS, TS, HTML, CSS, JSON, XML, YAML, INI, CFG, LOG, CSV, SQL
                  </p>
                  <p className="text-sm text-gray-500">
                    –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB
                  </p>
                </div>
              </div>
            </div>
          ) : (
            <div className="file-info">
              <div className="file-info-header">
                <div className="file-info-content">
                  <span style={{ fontSize: '1.5rem' }}>üìÑ</span>
                  <div className="file-info-details">
                    <p className="filename">{selectedFile.name}</p>
                    <p className="filesize">
                      {(selectedFile.size / 1024 / 1024).toFixed(2)} MB
                    </p>
                  </div>
                </div>
                <button
                  type="button"
                  onClick={removeFile}
                  className="remove-button"
                  title="–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª"
                >
                  ‚ùå
                </button>
              </div>
            </div>
          )}
        </div>

        {/* Password */}
        <div className="modern-form-group">
          <label className="modern-form-label">
            –ü–∞—Ä–æ–ª—å
          </label>
          <input
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="modern-form-input"
            placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤)"
            required
            minLength={8}
          />
          <p className="text-sm text-gray-500 mt-1">
            –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è –∑–∞–≥–ª–∞–≤–Ω—ã–µ –∏ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã
          </p>
        </div>

        <button
          type="submit"
          disabled={loading || !selectedFile}
          className="modern-btn modern-btn-primary w-full"
        >
          {loading ? '‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞...' : (mode === 'encrypt' ? 'üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª' : 'üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª')}
        </button>
      </form>

      {/* Results */}
      {result && (
        <div className={`results-section ${result.success ? 'results-success' : 'results-error'}`}>
          {result.success ? (
            <div className="space-y-4">
              <div className="flex items-center space-x-2 text-success">
                <span style={{ fontSize: '1.5rem' }}>‚úÖ</span>
                <span className="font-medium">
                  {mode === 'encrypt' ? '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω!' : '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω!'}
                </span>
              </div>

              <div style={{ backgroundColor: '#f0fdf4', borderRadius: '0.5rem', padding: '1rem' }}>
                <p className="text-sm text-gray-600">
                  <strong>–ò–º—è —Ñ–∞–π–ª–∞:</strong> {result.filename}
                </p>
                <p className="text-sm text-gray-600 mt-1">
                  –§–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞—á–∞–Ω –≤ –ø–∞–ø–∫—É –∑–∞–≥—Ä—É–∑–æ–∫
                </p>
              </div>
            </div>
          ) : (
            <div className="flex items-center space-x-2 text-error">
              <span style={{ fontSize: '1.5rem' }}>‚ùå</span>
              <span className="font-medium">–û—à–∏–±–∫–∞: {result.error}</span>
            </div>
          )}
        </div>
      )}
    </>
  );
};

export default FileUpload;
